<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Notes</title>
    <link>http://localhost:1313/NotesWebsite/</link>
    <description>Recent content on My Notes</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/NotesWebsite/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From Concept to knowledge</title>
      <link>http://localhost:1313/NotesWebsite/kr/from-concept-to-knowledge-in-el/</link>
      <pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/from-concept-to-knowledge-in-el/</guid>
      <description>&lt;p&gt;so far we described concepts and their relationships&lt;/p&gt;&#xA;&lt;p&gt;How do we express knowledge?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Trough constraints on the relevant interpretations (Tbox)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;A Tbox (terminological Box) is used to impose restrictions on the potential interpretation of concepts&lt;/p&gt;&#xA;&lt;p&gt;A ($\mathcal{EL}^\bot$) general concept inclusion &lt;code&gt;GCI&lt;/code&gt; is an expression $C \sqsubseteq D$ with C and D $\mathcal{EL}^\bot$ concepts&#xA;a TBox is a finite set of GCI&amp;rsquo;s&lt;/p&gt;&#xA;&lt;p&gt;an interpretation $\mathcal{I}$ satisfies the GCI  $C \sqsubseteq D$ iff $C^{\mathcal{I}} \subseteq D^\mathcal{I}$&lt;/p&gt;</description>
    </item>
    <item>
      <title>New KR language</title>
      <link>http://localhost:1313/NotesWebsite/kr/new-kr-language/</link>
      <pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/new-kr-language/</guid>
      <description>&lt;p&gt;$\mathcal{EL^\top}$&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Limited expression of predicate rules&lt;/li&gt;&#xA;&lt;li&gt;allows for constraints&lt;/li&gt;&#xA;&lt;li&gt;allows for anonymous objects&lt;/li&gt;&#xA;&lt;li&gt;has effective and efficient reasoning methods&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;$\mathcal{EL^\top}$ Belongs to a bigger family of KR languages knowns as DL&amp;rsquo;s (Description Logics)&#xA;Dl&amp;rsquo;s are a category of languages characterized by:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Clear syntax&lt;/li&gt;&#xA;&lt;li&gt;formal unambiguous semantics&#xA;The scope of DL&amp;rsquo;s is to provide reasoning, and the main goal is to have decidable reasoning services (sound, complete and terminating algorithms)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Most DL&amp;rsquo;s fall within the two variable fragment of first-order predicate logic (we can only use 2 variables)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Representing Individuals in ALC</title>
      <link>http://localhost:1313/NotesWebsite/kr/representing-individuals-in-alc/</link>
      <pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/representing-individuals-in-alc/</guid>
      <description>&lt;h2 id=&#34;aboxes&#34;&gt;ABoxes&lt;/h2&gt;&#xA;&lt;p&gt;Consider an infinite set $N_I$ of individual names, disjoint with $N_C \ \mbox{and} \ N_R$&lt;/p&gt;&#xA;&lt;p&gt;An &lt;strong&gt;Assertion&lt;/strong&gt; is an expression of the form&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$C(a)$ where $a \in N_I$ and C is an $\mathcal{ALC}$ concept&lt;/li&gt;&#xA;&lt;li&gt;$r(a,b)$ where $a,b \in N_I$ and $r \in N_R$&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;An assertion box &lt;code&gt;ABox&lt;/code&gt; is a finite set of assertions&lt;/p&gt;&#xA;&lt;p&gt;this concepts is kinda similar to relational database $\to$ keep in mind that usually DB&amp;rsquo;s are complete (if a person isn&amp;rsquo;t in the student&amp;rsquo;s DB, he&amp;rsquo;s not a student ), while ABoxes aren&amp;rsquo;t and work with an &lt;strong&gt;Open World Assumption&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type of Knowledge</title>
      <link>http://localhost:1313/NotesWebsite/kr/type-of-knowledge/</link>
      <pubDate>Mon, 18 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/type-of-knowledge/</guid>
      <description>&lt;p&gt;With all languages seen so far, knowledge is considered &lt;strong&gt;Static&lt;/strong&gt;&#xA;This is meaningful in many domains, but insufficient in the context of processes&lt;/p&gt;&#xA;&lt;p&gt;We need a way to deal with time and dynamic knowledge&lt;/p&gt;&#xA;&lt;h2 id=&#34;time&#34;&gt;Time&lt;/h2&gt;&#xA;&lt;p&gt;To deal with time we first have to decide if it&amp;rsquo;s&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;discrete&lt;/strong&gt; or &lt;strong&gt;continuous&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;linear&lt;/strong&gt; or &lt;strong&gt;branching&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;we will deal with time using $LTL_f$ (showcases the main ideas of temporal reasoning while still remaining pretty simple)&lt;/p&gt;</description>
    </item>
    <item>
      <title>First Order Logic</title>
      <link>http://localhost:1313/NotesWebsite/computational-logic/first-order-logic/</link>
      <pubDate>Fri, 08 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computational-logic/first-order-logic/</guid>
      <description>&lt;h2 id=&#34;socrates-is-a-man&#34;&gt;All man are mortal&#xA;Socrates is a man&lt;/h2&gt;&#xA;&lt;p&gt;Socrates is mortal&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$\forall x (Man(x) \rightarrow Mortal(x))$&lt;/li&gt;&#xA;&lt;li&gt;$Man(Socrates)$&lt;/li&gt;&#xA;&lt;li&gt;$Mortal(Socrates)$&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;First Order logic includes&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Names for objects &lt;code&gt;individual constants&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Names for operations &lt;code&gt;function symbols&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Names for properties and relations &lt;code&gt;operations&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;$\mathcal{l} = &amp;lt; \mathcal{F, P}, \alpha &amp;gt;$&#xA;where&#xA;$\mathcal{F}$ is the set of operation symbols&#xA;$\mathcal{P}$ is the set of predicates&#xA;$\alpha$ is a function which tells us how many arguments an operation can take&lt;/p&gt;</description>
    </item>
    <item>
      <title>Estimate PI</title>
      <link>http://localhost:1313/NotesWebsite/computer-programming/estimatepi/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computer-programming/estimatepi/</guid>
      <description>&lt;p&gt;$$\frac{1}{\pi} = \frac{2\sqrt{2}}{9801} \sum_{k=0}^\infty \frac{(4k)!(1103+26390k)}{(k!)^4396^{4k}}$$&lt;/p&gt;&#xA;&lt;p&gt;Estimate Pi using the formula above, then compare it with math.pi&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import math as m&#xA;def estimatePi():&#xA;    t = 0 #  t is last term&#xA;    k = 0&#xA;    while t &amp;lt; 1e-15:&#xA;        t = t + ((m.factorial(4*k)) * 1103 + 26390 * k) / (pow((m.factorial(k)), 4) * pow(396, 4 *k))&#xA;        k = k + 1&#xA;    return (2 * m.sqrt(2) ) / 9801 * t&#xA;&#xA;print(1/ estimatePi())&#xA;print(m.pi)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Exercise 4.3</title>
      <link>http://localhost:1313/NotesWebsite/computer-programming/ngonexercise/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computer-programming/ngonexercise/</guid>
      <description>&lt;p&gt;Wrtie a function which draws a polygon of given sides and size, then dividite in slices&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import turtle&#xA;import math&#xA;def ngon(radius, sides):&#xA;    for x in range(int(sides)):&#xA;        # drawing outside polygon&#xA;        turtle.forward(radius)&#xA;        turtle.left(360 / sides)&#xA;&#xA;        # function stops at every point in order to draw the slices&#xA;        turtle.left((((sides - 2)*180) / sides) / 2)&#xA;        turtle.forward((radius/2) / math.sin(math.radians((360/sides / 2))))    # angle is calculated using trig functions &#xA;        turtle.backward((radius/2) / math.sin(math.radians((360/sides /2) ))) &#xA;        turtle.right((((sides - 2)*180) / sides) / 2)&#xA;    &#xA;ngon(60, 13) # polygon of side = 60 with 13 sides&#xA;turtle.mainloop()&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Extension of predicate rules</title>
      <link>http://localhost:1313/NotesWebsite/kr/extension-of-predicate-rules/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/extension-of-predicate-rules/</guid>
      <description>&lt;h1 id=&#34;rules-as-programming&#34;&gt;Rules as programming&lt;/h1&gt;&#xA;&lt;p&gt;we can read the rule $H \leftarrow B$ as &amp;ldquo;If B is true, then H is true&amp;rdquo;&#xA;Knowledge is then propagated in one direction, other than that, there are no limits beyond constraints.&#xA;What if we wanna express that a person has at most / at least 2 parents, or that someone is alive iff they are not dead (they are either alive or dead, they have to be one, they can&amp;rsquo;t be both)?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inconsistent KBs</title>
      <link>http://localhost:1313/NotesWebsite/kr/inconsistent-kbs/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/inconsistent-kbs/</guid>
      <description>&lt;p&gt;In case of inconsistency, the canonical model might not be a model of our KB&#xA;To determine if a KB is inconsistent we have to keep in mind some things&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Constraints may lead to contradictory knowledge&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Platypus(perry) $\leftarrow$&lt;/li&gt;&#xA;&lt;li&gt;Duck(perry) $\leftarrow$&lt;/li&gt;&#xA;&lt;li&gt;$\leftarrow$ Duck(x), Platypus(x)&#xA;Inconsistent as an object can&amp;rsquo;t be both a platypus and a duck due to the &lt;strong&gt;Principle of Explosion&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;A KB is inconsistent iff it&amp;rsquo;s canonical interpretation is unsound&#xA;Reasoning requires us to look at the canonical interpretation only&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parametric Description of Motion</title>
      <link>http://localhost:1313/NotesWebsite/physics/parametric-description-of-motion/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/physics/parametric-description-of-motion/</guid>
      <description>&lt;p&gt;Check out the simulation on &lt;a href=&#39;https://phet.colorado.edu/en/simulations/projectile-motion&#39;&gt; Phet&amp;rsquo;s Website &lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;What forces are present in the scene&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Weight, always perpendicular to the ground&lt;/li&gt;&#xA;&lt;li&gt;Drag, always negative in relation to the motion of the ball, only active when the object is moving&lt;/li&gt;&#xA;&lt;li&gt;&amp;lsquo;Cannon Force&amp;rsquo;, which initially accelerates the ball&lt;/li&gt;&#xA;&lt;li&gt;Static frictional force, between the ball and the cannon walls&#xA;$$Acceleration: \frac{dv(t)}{dt}$$&#xA;Kinematic Laws&#xA;$z(t) = z(t_0) + v_{z0}(t-t_0) + \frac{a_z}{2}(t-t_0)^2 \rightsquigarrow s = \frac{1}{2}at^2$&lt;br&gt;&#xA;$v_z(t) = v_{z0} + a_z(t -t_0) \rightsquigarrow v=at$&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;with reaction force we refer to a force which acts in opposite way due to another force &lt;code&gt;normal forces&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Representing Knowledge as Rules</title>
      <link>http://localhost:1313/NotesWebsite/kr/representing-knowledge-as-rules/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/representing-knowledge-as-rules/</guid>
      <description>&lt;p&gt;also see [[Boolean Algebra and Propositional Logic]]&lt;/p&gt;&#xA;&lt;h1 id=&#34;clauses&#34;&gt;Clauses&lt;/h1&gt;&#xA;&lt;p&gt;a clause is a ==disjunction== of literals &lt;code&gt;(variables or negated variables)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;some clauses&#xA;$$ x \vee y \vee \neg z $$&#xA;$$ \neg x \vee \neg y $$&lt;/p&gt;&#xA;&lt;h2 id=&#34;horn-clause&#34;&gt;Horn Clause&lt;/h2&gt;&#xA;&lt;p&gt;A Horn clause has at most 1 positive literal&lt;/p&gt;&#xA;&lt;p&gt;$x$&#xA;$x \vee \neg y \vee \neg z$&lt;/p&gt;&#xA;&lt;p&gt;We will represent Horn clauses in a different way&#xA;$(x_1 \wedge x_2 \wedge &amp;hellip; \wedge X_n) \rightarrow y$&#xA;Meaning if all X&amp;rsquo;s are true, then y must be true as well&lt;/p&gt;</description>
    </item>
    <item>
      <title>Z3, basic notions and syntax</title>
      <link>http://localhost:1313/NotesWebsite/computational-logic/z3-lab-instructions/</link>
      <pubDate>Wed, 16 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computational-logic/z3-lab-instructions/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;(declare-const p Bool)&lt;/code&gt; is declaring a variable named P&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;;&lt;/code&gt; comments are done through semicolons&lt;/li&gt;&#xA;&lt;li&gt;formulas are declared using &lt;code&gt;not, and, or, =&amp;gt;, =&lt;/code&gt;, the symbols must be prefixed, for example to write $p \vee q$  you would write &lt;code&gt;(or p q)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;(assert(formula))&lt;/code&gt; adds the formula to the check-sat&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;(check-sat)&lt;/code&gt; verifies if the formula can be True&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;To check if a formula $\mathcal{A}$ is a Tautology we first negate the formula and then we verify if $\neg{A}$ is unsatisfiable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some Definitions</title>
      <link>http://localhost:1313/NotesWebsite/calculus/some-definitions/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/calculus/some-definitions/</guid>
      <description>&lt;p&gt;Bounded and unbounded Sets&#xA;$Q \supseteq A \rightarrow where \ A {2,3}, if \ exists \ a \ number \ such \ that \ 2&amp;lt;r \in Q &amp;lt;3, then \ A \ is \ a \ bounded  \ set$&#xA;Q couldn&amp;rsquo;t be a bounded set as  $Q = {-\infty, +\infty}$&lt;/p&gt;&#xA;&lt;p&gt;A Set can be bounded below, such that  $A = {0, +\infty }$, A Set can also be upwards bounded, such that$A = {-\infty, 2 }$&lt;/p&gt;</description>
    </item>
    <item>
      <title>Computational Logic, From SAT to SMT</title>
      <link>http://localhost:1313/NotesWebsite/computational-logic/computational-logic-from-sat-to-smt/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computational-logic/computational-logic-from-sat-to-smt/</guid>
      <description>&lt;h2 id=&#34;propositional-logic&#34;&gt;Propositional Logic&lt;/h2&gt;&#xA;&lt;p&gt;Refer to the KR notes on the same topic&lt;/p&gt;&#xA;&lt;p&gt;Remember that&#xA;$$ \rightarrow means \space if, \space while\space \leftrightarrow \space means \space if \space and\space only\space if $$&#xA;Some expressions make perfect sense, like&#xA;$$(p\vee q) \rightarrow r$$&#xA;&lt;code&gt;If it rains (p) or it snows (q), then i will take an umbrella (r)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;while others are meaningless&#xA;$$pq)) \rightarrow r$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;formula&#34;&gt;Formula&lt;/h2&gt;&#xA;&lt;p&gt;A formula is a string of characters which follows the following rules&#xA;$Every \space p \in L \space is \ a \ formula \ (rule \ n1) \ if \ all \ A,B&amp;rsquo;s \ are \ formulas, then \ (A \vee B) \ and \ (A \wedge B) \ are \ also \ formulas \ (rule \ n2)$&#xA;we can also create a tree from the main formula, where the nodes are built using rule 2 and the last elements using rule 1&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dealing with objects</title>
      <link>http://localhost:1313/NotesWebsite/kr/dealing-with-objects/</link>
      <pubDate>Thu, 10 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/dealing-with-objects/</guid>
      <description>&lt;p&gt;&lt;code&gt;Propositional logic&lt;/code&gt; is able to deal with only one item at a time&#xA;What if we want to relate different objects?&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ana is a professor&lt;/li&gt;&#xA;&lt;li&gt;Ana supervises bob&#xA;or&lt;/li&gt;&#xA;&lt;li&gt;A grandparents is the parent of a parent&lt;/li&gt;&#xA;&lt;li&gt;Uncles have siblings who are parents&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;What we have to do is extending the rules in order to handle predicate knowledge&#xA;uncle(x) $\leftarrow$ sibling(x, y), parent(x, y)&lt;/p&gt;&#xA;&lt;p&gt;From proposition to predicates&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Mammal&lt;/strong&gt; is a &lt;code&gt;propositional variable&lt;/code&gt; which is either True &lt;code&gt;or&lt;/code&gt; False&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;we can then represent more informations through predicates such as&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exercise 2.2.3</title>
      <link>http://localhost:1313/NotesWebsite/computer-programming/breakfastex/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computer-programming/breakfastex/</guid>
      <description>&lt;p&gt;If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast?&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;minutes = 9*60 + 12&#xA;TotalTime = minutes + 2*(8 + 15/60) + 3*(7+ 12/60)&#xA;print(int(TotalTime/60))&#xA;print(TotalTime - (int(TotalTime/60)) *60)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>About me</title>
      <link>http://localhost:1313/NotesWebsite/about/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:51 +0200</pubDate>
      <guid>http://localhost:1313/NotesWebsite/about/</guid>
      <description>&lt;p&gt;Hey, this is some information about me&#xA;:)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Boolean Algebra and Propositional Logic</title>
      <link>http://localhost:1313/NotesWebsite/kr/boolean-algebra-and-propositional-logic/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:51 +0200</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/boolean-algebra-and-propositional-logic/</guid>
      <description>&lt;p&gt;Boolean algebra refers to the manipulation of truth values through logical operations.&#xA;We are gonna consider just 2 truth values&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;True &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;False &lt;code&gt;0&lt;/code&gt;&#xA;and 3 Boolean Operators to manipulate the values&lt;/li&gt;&#xA;&lt;li&gt;Conjunction (∧) &lt;code&gt;And&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Disjunction (∨) &lt;code&gt;Or&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Negation (¬) &lt;code&gt;Not&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In Boolean Algebra we compute complex expressions of Logic Operators containing variables&lt;/p&gt;&#xA;&lt;h1 id=&#34;propositional-logic&#34;&gt;Propositional Logic&lt;/h1&gt;&#xA;&lt;p&gt;Propositional logic is used to combine propositions and studying their truth values&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Atomic Propositions state one fact or one property &lt;code&gt;Mammals are vertebreae&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;formulas&#34;&gt;Formulas&lt;/h2&gt;&#xA;&lt;p&gt;==Formulas== are used to combine propositions&#xA;[[Logic]] is still a language so we must specify&lt;/p&gt;</description>
    </item>
    <item>
      <title>History of KR</title>
      <link>http://localhost:1313/NotesWebsite/kr/history-of-kr/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:51 +0200</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/history-of-kr/</guid>
      <description>&lt;p&gt;History is deeply connected with recording techniques such as writing or oral traditions (humans always felt the need to transmit knowledge, `this was done trough myths, stories, etc.)&lt;/p&gt;&#xA;&lt;p&gt;Oral and written traditions preserve and propagate knowledge&#xA;traditions hardly resist the test of time, their meaning easily change, and they&amp;rsquo;re also very hard to update, the language could also result ambiguous&#xA;Our goal is to represent knowledge with guarantees without the need of Trained Interpreters (like in religious text)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Introduction to Computer Programming</title>
      <link>http://localhost:1313/NotesWebsite/computer-programming/books/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:51 +0200</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computer-programming/books/</guid>
      <description>&lt;h1 id=&#34;history-of-computing-machines&#34;&gt;History of Computing Machines&lt;/h1&gt;&#xA;&lt;h3 id=&#34;pascaline&#34;&gt;Pascaline&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Digital, Non programmable machine based on gears&lt;/li&gt;&#xA;&lt;li&gt;Able to do simple operations like Addition and Subtraction&lt;/li&gt;&#xA;&lt;li&gt;Computations based on the discrete positions of the gears&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;differential-engine&#34;&gt;Differential Engine&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Digital, non programmable machine based on an Engine &lt;code&gt;who would have guessed&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Able to compute polynomial approximations through the compute of tables&lt;/li&gt;&#xA;&lt;li&gt;Evolved into the Analytical Engine, which was General purpose programmable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;z1&#34;&gt;Z1&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Digital, Partially programmable machine&lt;/li&gt;&#xA;&lt;li&gt;Able to compute the 4 basic operations (`division was doing trough looping)&lt;/li&gt;&#xA;&lt;li&gt;Later evolved into the Z3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;tr-48&#34;&gt;TR-48&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Analog, programmable computer based on transistors&lt;/li&gt;&#xA;&lt;li&gt;Used for simulation and process control&lt;/li&gt;&#xA;&lt;li&gt;Faster than Digital solutions of its time&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;von-neumann-architecture&#34;&gt;Von Neumann architecture&lt;/h1&gt;&#xA;&lt;p&gt;Most current computers are built on this&#xA;Programs and data are stored as numbers in memory&lt;/p&gt;</description>
    </item>
    <item>
      <title>Logic</title>
      <link>http://localhost:1313/NotesWebsite/kr/logic/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:51 +0200</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/logic/</guid>
      <description>&lt;p&gt;Type of language without the nuances (you write exactly whatever you mean , every sentence has 1 meaning)&#xA;we will use logic to manipulate knowledge, associating expressions with their meaning&lt;/p&gt;&#xA;&lt;p&gt;Reasoning needs ==guarantees&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;After reading the party examples from the slides (example of a constraint satisfaction problem)&lt;/code&gt;&#xA;We couldn&amp;rsquo;t respond to the question &amp;ldquo;Who&amp;rsquo;s invited as there isn&amp;rsquo;t a single viable answer&amp;rdquo;, however we can say for sure that the party is possible&lt;/p&gt;</description>
    </item>
    <item>
      <title>Logic and Symbolic AI</title>
      <link>http://localhost:1313/NotesWebsite/kr/logic-and-symbolic-ai/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:51 +0200</pubDate>
      <guid>http://localhost:1313/NotesWebsite/kr/logic-and-symbolic-ai/</guid>
      <description>&lt;h1 id=&#34;intelligence&#34;&gt;Intelligence&lt;/h1&gt;&#xA;&lt;p&gt;AI deals with machines showing intelligent traits, isn&amp;rsquo;t equivalent to humane cognitive attributes&#xA;Humans work on 2 different thought processes; ==system 1 (reflexes, fast and intuitive) and system 2 (Used in thought, slow and more logical, takes effort and time)&lt;/p&gt;&#xA;&lt;p&gt;System 1 is useful for simple task but can be easily fooled (Pareidolia) it&amp;rsquo;s also hard wired and hard to modify it (In AI creation and modification of it can be very expensive as it needs time and repetition to build a strong muscle memory)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Measures, Introduction to Data and Error Analysis</title>
      <link>http://localhost:1313/NotesWebsite/physics/measures-introduction-to-data-and-error-analysis/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:51 +0200</pubDate>
      <guid>http://localhost:1313/NotesWebsite/physics/measures-introduction-to-data-and-error-analysis/</guid>
      <description>&lt;h2 id=&#34;error-analysis&#34;&gt;Error Analysis&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Calculate the mean between the different measures&lt;/li&gt;&#xA;&lt;li&gt;Calculate the residuals X&lt;sub&gt;n&lt;/sub&gt; - Mean of X&amp;rsquo;s &lt;code&gt;the sum of the residuals should approximate to 0, but its not a very good rapresentation&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Calculate the standard deviation &lt;code&gt;Rapresentation of how much the data deviates from the Mean value&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Standard deviation Formula&#xA;$$ S_x = \sqrt \frac{\sum^n_{i=1} (X_i - \bar x)^2}{n-1}$$&lt;/p&gt;&#xA;&lt;h2 id=&#34;representing-data&#34;&gt;Representing Data&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Tables &lt;code&gt;not very efficient nor readable&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Histograms &lt;code&gt;Graphical rapresentation of Data, Easier to compare&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Normalized Histograms are used to represent the frequency of every measure, &lt;code&gt;The data is averaged in Bins, which range from 2 values&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
