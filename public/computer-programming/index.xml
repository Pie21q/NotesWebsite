<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Programming on My Notes</title>
    <link>http://localhost:1313/NotesWebsite/computer-programming/</link>
    <description>Recent content in Computer Programming on My Notes</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 26 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/NotesWebsite/computer-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Anagrams Exercise</title>
      <link>http://localhost:1313/NotesWebsite/computer-programming/anagrams/</link>
      <pubDate>Tue, 26 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computer-programming/anagrams/</guid>
      <description>&lt;p&gt;Exercise from&#xA;&lt;a href=&#39;https://greenteapress.com/thinkpython2/html/index.html&#39;&gt;Think Python, 2nd Edition&lt;/a&gt;&#xA;by Allen Downey&lt;/p&gt;&#xA;&lt;p&gt;Write a program that reads a word list from a file (see Section 9.1) and prints all the sets of words that are anagrams.&#xA;Here is an example of what the output might look like:&#xA;[&amp;lsquo;deltas&amp;rsquo;, &amp;lsquo;desalt&amp;rsquo;, &amp;rsquo;lasted&amp;rsquo;, &amp;lsquo;salted&amp;rsquo;, &amp;lsquo;slated&amp;rsquo;, &amp;lsquo;staled&amp;rsquo;]&#xA;[&amp;lsquo;retainers&amp;rsquo;, &amp;rsquo;ternaries&amp;rsquo;]&#xA;[&amp;lsquo;generating&amp;rsquo;, &amp;lsquo;greatening&amp;rsquo;]&#xA;[&amp;lsquo;resmelts&amp;rsquo;, &amp;lsquo;smelters&amp;rsquo;, &amp;rsquo;termless&amp;rsquo;]&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;words = open(&amp;#39;words.txt&amp;#39;).read().split(&amp;#39;\n&amp;#39;)&#xA;&#xA;def Anagrams(list, word):&#xA;    d = dict()&#xA;    for x in range(len(list) -1):&#xA;            if tuple(sorted(tuple(list[x]))) in d: # list[x] is first made in to a tuple s.t. &amp;#39;exp&amp;#39; becomes (&amp;#39;e&amp;#39;, &amp;#39;x&amp;#39;, &amp;#39;p&amp;#39;), it&amp;#39;s then ordered to (&amp;#39;e&amp;#39;, &amp;#39;p&amp;#39;, &amp;#39;x&amp;#39;), it is then \&#xA;                  # made again into a tuple as sorted returns a list but the dictionary key cannot be one&#xA;&#xA;                  d[tuple(sorted(tuple(list[x])))].append(list[x])  # case in which the key already exist&#xA;            else:  # case in which the key doesnt exists&#xA;                  d[tuple(sorted(tuple(list[x])))] = [] # create an empty list in the key&#xA;                  d[tuple(sorted(tuple(list[x])))].append(list[x]) # append the first value to the empty list&#xA;&#xA;    return d[tuple(sorted(tuple(word)))]&#xA;&#xA;print(Anagrams(words, &amp;#39;deltas&amp;#39;))&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Estimate PI</title>
      <link>http://localhost:1313/NotesWebsite/computer-programming/estimatepi/</link>
      <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computer-programming/estimatepi/</guid>
      <description>&lt;p&gt;$$\frac{1}{\pi} = \frac{2\sqrt{2}}{9801} \sum_{k=0}^\infty \frac{(4k)!(1103+26390k)}{(k!)^4396^{4k}}$$&lt;/p&gt;&#xA;&lt;p&gt;Estimate Pi using the formula above, then compare it with math.pi&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import math as m&#xA;def estimatePi():&#xA;    t = 0 #  t is last term&#xA;    k = 0&#xA;    while t &amp;lt; 1e-15:&#xA;        t = t + ((m.factorial(4*k)) * 1103 + 26390 * k) / (pow((m.factorial(k)), 4) * pow(396, 4 *k))&#xA;        k = k + 1&#xA;    return (2 * m.sqrt(2) ) / 9801 * t&#xA;&#xA;print(1/ estimatePi())&#xA;print(m.pi)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Exercise 4.3</title>
      <link>http://localhost:1313/NotesWebsite/computer-programming/ngonexercise/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computer-programming/ngonexercise/</guid>
      <description>&lt;p&gt;Wrtie a function which draws a polygon of given sides and size, then dividite in slices&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import turtle&#xA;import math&#xA;def ngon(radius, sides):&#xA;    for x in range(int(sides)):&#xA;        # drawing outside polygon&#xA;        turtle.forward(radius)&#xA;        turtle.left(360 / sides)&#xA;&#xA;        # function stops at every point in order to draw the slices&#xA;        turtle.left((((sides - 2)*180) / sides) / 2)&#xA;        turtle.forward((radius/2) / math.sin(math.radians((360/sides / 2))))    # angle is calculated using trig functions &#xA;        turtle.backward((radius/2) / math.sin(math.radians((360/sides /2) ))) &#xA;        turtle.right((((sides - 2)*180) / sides) / 2)&#xA;    &#xA;ngon(60, 13) # polygon of side = 60 with 13 sides&#xA;turtle.mainloop()&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Exercise 2.2.3</title>
      <link>http://localhost:1313/NotesWebsite/computer-programming/breakfastex/</link>
      <pubDate>Tue, 08 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computer-programming/breakfastex/</guid>
      <description>&lt;p&gt;If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast?&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;minutes = 9*60 + 12&#xA;TotalTime = minutes + 2*(8 + 15/60) + 3*(7+ 12/60)&#xA;print(int(TotalTime/60))&#xA;print(TotalTime - (int(TotalTime/60)) *60)&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Introduction to Computer Programming</title>
      <link>http://localhost:1313/NotesWebsite/computer-programming/books/</link>
      <pubDate>Sat, 05 Oct 2024 12:08:51 +0200</pubDate>
      <guid>http://localhost:1313/NotesWebsite/computer-programming/books/</guid>
      <description>&lt;h1 id=&#34;history-of-computing-machines&#34;&gt;History of Computing Machines&lt;/h1&gt;&#xA;&lt;h3 id=&#34;pascaline&#34;&gt;Pascaline&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Digital, Non programmable machine based on gears&lt;/li&gt;&#xA;&lt;li&gt;Able to do simple operations like Addition and Subtraction&lt;/li&gt;&#xA;&lt;li&gt;Computations based on the discrete positions of the gears&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;differential-engine&#34;&gt;Differential Engine&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Digital, non programmable machine based on an Engine &lt;code&gt;who would have guessed&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;Able to compute polynomial approximations through the compute of tables&lt;/li&gt;&#xA;&lt;li&gt;Evolved into the Analytical Engine, which was General purpose programmable&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;z1&#34;&gt;Z1&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Digital, Partially programmable machine&lt;/li&gt;&#xA;&lt;li&gt;Able to compute the 4 basic operations (`division was doing trough looping)&lt;/li&gt;&#xA;&lt;li&gt;Later evolved into the Z3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;tr-48&#34;&gt;TR-48&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Analog, programmable computer based on transistors&lt;/li&gt;&#xA;&lt;li&gt;Used for simulation and process control&lt;/li&gt;&#xA;&lt;li&gt;Faster than Digital solutions of its time&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;von-neumann-architecture&#34;&gt;Von Neumann architecture&lt;/h1&gt;&#xA;&lt;p&gt;Most current computers are built on this&#xA;Programs and data are stored as numbers in memory&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
